//package com.zgx.bootdemo.dao;
//
//import com.zgx.bootdemo.entity.Page;
//import org.hibernate.Session;
//import org.hibernate.criterion.DetachedCriteria;
//import org.springframework.orm.hibernate5.HibernateTemplate;
//
//import java.io.Serializable;
//import java.util.List;
//
//public interface BaseDao {
//    /**
//     * <b>function:</b>增加一个entity对象，返回是否添加成功
//     *
//     * @param T      对象类型
//     * @param entity 实体类
//     * @return boolean true/false
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:44:34
//     * @author ending
//     */
//    public <T> boolean add(T entity) throws Exception;
//
//    /**
//     * <b>function:</b>增加一个entity对象，返回String主键
//     *
//     * @param T      对象类型
//     * @param entity 实体类
//     * @return String
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:45:15
//     * @author ending
//     */
//    public <T> String addStringKey(T entity) throws Exception;
//
//    /**
//     * <b>function:</b>增加一个entity对象，返回Integer主键
//     *
//     * @param T      对象类型
//     * @param entity 实体类
//     * @return Integer
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:45:15
//     * @author ending
//     */
//    public <T> Integer addNumKey(T entity) throws Exception;
//
//    /**
//     * <b>function:</b>传入一个hql语句，返回影响多少条数据
//     *
//     * @param hql
//     * @return int
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:45:15
//     * @author ending
//     */
//    public int executeData(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>传入一个hql语句，返回list集合
//     *
//     * @param hql
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:53:14
//     * @author ending
//     */
//    public <T> List<T> findByHql(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>执行sql语句，实行增，删，改
//     *
//     * @param sql
//     * @return Integer
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:56:03
//     * @author ending
//     */
//    public int executeBySql(String sql) throws Exception;
//
//    /**
//     * <b>function:</b>执行sql查询语句，获取list集合
//     *
//     * @param sql
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午02:56:03
//     * @author ending
//     */
//    public <T> List<T> findBySql(String sql) throws Exception;
//
//    /**
//     * <b>function:</b>修改实体的数据，返回boolean结果
//     *
//     * @param entity
//     * @return boolean
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:01:08
//     * @author ending
//     */
//    public <T> boolean editEntity(T entity) throws Exception;
//
//    /**
//     * <b>function:</b>执行hql语句，返回boolean结果
//     *
//     * @param hql
//     * @return boolean
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:01:08
//     * @author ending
//     */
//    public boolean editHql(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>执行hql语句，返回执行结果影响的行数
//     *
//     * @param hql
//     * @return Integer
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:04:10
//     * @author ending
//     */
//    public int editNumHql(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>传入要删除的实体，返回boolean结果
//     *
//     * @param entity
//     * @return boolean
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:08:33
//     * @author ending
//     */
//    public <T> boolean removeEntity(T entity) throws Exception;
//
//
//    /**
//     * <b>function:</b>传入要实体类的class和int主键，返回具体实体
//     *
//     * @param clazz
//     * @param id
//     * @return T
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:12:07
//     * @author ending
//     */
//    public <T> T getById(Class<T> clazz, int id) throws Exception;
//
//    /**
//     * <b>function:</b>传入要实体类的class和String主键，返回具体实体
//     *
//     * @param clazz
//     * @param id
//     * @return T
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:12:07
//     * @author ending
//     */
//    public <T> T getById(Class<T> clazz, String id) throws Exception;
//
//    /**
//     * <b>function:</b>传入要实体类的class和Serializable主键，返回具体实体
//     *
//     * @param clazz
//     * @param id
//     * @return T
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:12:07
//     * @author ending
//     */
//    public <T> T getById(Class<T> clazz, Serializable id) throws Exception;
//
//    /**
//     * <b>function:</b>传入hql语句，返回实体
//     *
//     * @param hql
//     * @return T
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:16:21
//     * @author ending
//     */
//    public <T> T getByHql(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>传入hql语句，返回实体集合
//     *
//     * @param hql
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:17:26
//     * @author ending
//     */
//    public <T> List<T> getList(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>传入hql语句删除数据，返回执行结果
//     *
//     * @param hql
//     * @return boolean
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:18:44
//     * @author ending
//     */
//    public boolean remove(String hql) throws Exception;
//
//    /**
//     * <b>function:</b>动态查询
//     *
//     * @param clazz
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:18:44
//     * @author ending
//     */
//    public <T> List<T> getList(Class<T> clazz) throws Exception;
//
//    /**
//     * <b>function:</b>传入hql查询语句和object数组的参数，list返回结果
//     *
//     * @param hql
//     * @param obj
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:18:44
//     * @author ending
//     */
//    public <T> List<T> getList(String hql, Object[] obj) throws Exception;
//
//    /**
//     * <b>function:</b>传入查询语句和查询总条数的hql，当前页数，一页显示多少数据，用list集合返回
//     *
//     * @param queryHql
//     * @param queryCountHql
//     * @param firstResult
//     * @param maxResult
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:26:39
//     * @author ending
//     */
//    public List<?> showPage(String queryHql, String queryCountHql, int firstResult, int maxResult) throws Exception;
//
//    /**
//     * <b>function:</b>传入查询语句和查询总条数的hql，page分页对象，用list集合返回
//     *
//     * @param queryHql
//     * @param queryCountHql
//     * @param page
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:26:39
//     * @author ending
//     */
//    public <T> List<T> showPage(String queryHql, String queryCountHql, Page<T> page) throws Exception;
//
//    /**
//     * <b>function:</b>传入查询语句和查询总条数的hql，DetachedCriteria动态查询条件进行分页，用list集合返回
//     *
//     * @param queryHql
//     * @param criteria
//     * @param firstResult
//     * @param maxResult
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:26:39
//     * @author ending
//     */
//    @SuppressWarnings("rawtypes")
//    public List showPage(String queryHql, DetachedCriteria criteria, int firstResult, int maxResult) throws Exception;
//
//    /**
//     * <b>function:</b>传入查询语句和查询总条数的hql，DetachedCriteria动态查询条件进行分页，分页对象page，用list集合返回
//     *
//     * @param queryHql
//     * @param criteria
//     * @param page
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:26:39
//     * @author ending
//     */
//    public <T> List<T> showPage(String queryHql, DetachedCriteria criteria, Page<T> page) throws Exception;
//
//    /**
//     * <b>function:</b>传入DetachedCriteria动态查询条件，用list集合返回
//     *
//     * @param criteria
//     * @return List
//     * @throws Exception
//     * @createDate 2016-11-25 下午03:38:01
//     * @author ending
//     */
//    public <T> List<?> find(DetachedCriteria criteria) throws Exception;
//
//    /**
//     * <b>function:</b>提供session使用
//     *
//     * @return Session
//     * @createDate 2016-11-25 下午03:39:22
//     * @author ending
//     */
////    public Session session();
//
//    /**
//     * <b>function:</b>提供HibernateTemplate使用
//     *
//     * @return HibernateTemplate
//     * @createDate 2016-11-25 下午03:39:22
//     * @author ending
//     */
////    public HibernateTemplate getTemplate();
//
//}
